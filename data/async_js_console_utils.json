{
    "_id": "7a2a5dc340e7dd5f6e7439078200c40a",
    "published": true,
    "type": "blogpost",
    "title": "Async.js update and console utils",
    "slug": "async_js_update_and_console_utils",
    "pubdate": "Mon, 02 Aug 2010 22:55:00 +0100",
    "intro": "Since my last post on the async module its gained quite a few features, not\nleast of which the ability to use it in the browser! However, one of the\nsimplest additions is an async-friendly version of console.log and console.dir.\nBoth of which are saving me quite a bit of typing when playing around in the\nnode REPL. But before demonstrating these functions, a quick overview of the\nlatest features:",
    "markdown": "Since my last post on the async module its gained quite a few features, not\nleast of which the ability to use it in the browser! However, one of the\nsimplest additions is an async-friendly version of console.log and console.dir.\nBoth of which are saving me quite a bit of typing when playing around in the\nnode REPL. But before demonstrating these functions, a quick overview of the\nlatest features:\n\n<dl>\n<dt>reduceRight<dt>\n<dd>Same as reduce, but the iterator is applied in reverse order.</dd>\n<dt>reject</dt>\n<dd>The opposite of filter, removes items that passes an async test.\n<dt>detect</dt>\n<dd>Returns the first value is a list that passes an async truth test.</dd>\n<dt>sortBy</dt>\n<dd>Sorts a list by the results of running each value through an async iterator,\nleaving the original values intact.</dd>\n<dt>nextTick</dt>\n<dd>Calls the callback on a later loop around the event loop.</dd>\n<dt>apply</dt>\n<dd>Creates a continuation with some arguments already applied, a useful\nshorthand when combined with other flow control functions.</dd>\n<dt>log</dt>\n<dd>Logs the result of an async function to the console.</dd>\n<dt>dir</dt>\n<dd>Logs the result of an async function to the console using console.dir</dd>\n<dt>noConflict</dt>\n<dd>Changes the value of async back to its original value, returning a\nreference to the async object.</dd>\n</dl>\n\nAsync.js now supports all the functions available as part of the excellent\n[underscore.js](http://documentcloud.github.com/underscore/) library, provided\nthey accept an iterator as one of their arguments. The only difference being that\nthese iterators allow asynchronous execution using a callback.\n\nAs I mentioned earlier, I'm already finding log and dir indispensable when\nplaying with code in the node REPL. A read-eval-print-loop isn't especially\nwell suited to asynchronous code. Consider the following function:\n\n<pre><code class=\"javascript\">function hello(name, callback){\n    setTimeout(function(){\n        callback(null, 'hello ' + name);\n    }, 100);\n};</code></pre>\n\nTo output the result of calling hello with 'world', you would need to enter\nthe following into the REPL:\n\n<pre><code class=\"no-highlight\">node&gt; hello('world', function(err, result){\n...     err ? console.error(err): console.log(result);\n...   });\n'hello world'</code></pre>\n\nHowever, using async.log, this is reduced to:\n\n<pre><code class=\"no-highlight\">node&gt; async.log(hello, 'world');\n'hello world'</code></pre>\n\nI can't believe I managed so long without this! To install the async module, you can\n[get the code from github](http://github.com/caolan/async), or install via npm:\n\n<pre><code class=\"no-highlight\">npm install async</code></pre>"
}
