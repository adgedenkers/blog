{
    "_id": "583da115697842a1f86bd2ed6900b38d",
    "published": true,
    "type": "blogpost",
    "pubdate": "Mon, 06 Sep 2010 22:00:00 +0100",
    "title": "On _designs undocumented",
    "slug": "on__designs_undocumented",
    "intro": "With the aim of understanding CouchDB as an application platform (and not just\na database), I've been exploring some of the more recent features, as well as a\nfew older ones that I'd previously neglected. I've found experimenting with\nthese at turns both exciting and frustrating. CouchDB continues to lack thorough\ndocumentation, and although the reasons behind most API choices are blindingly\nobvious once you understand the context of their implementation, getting there\nis a steepening learning curve.",
    "markdown": "With the aim of understanding CouchDB as an application platform (and not just\na database), I've been exploring some of the more recent features, as well as a\nfew older ones that I'd previously neglected. I've found experimenting with\nthese at turns both exciting and frustrating. CouchDB continues to lack thorough\ndocumentation, and although the reasons behind most API choices are blindingly\nobvious once you understand the context of their implementation, getting there\nis a steepening learning curve.\n\nIn the interest of sharing my findings and hopefully saving someone else (or\nperhaps my future-self) some time digging through source code and\nmailing-lists, I'm posting a few notes here for reference.\n\n\n## CouchDB JavaScript reference\n\nThe following functions are available in the scope of JavaScript executed by\nCouchDB. Some of them only make sense in certain contexts (emit is only used\nin map functions), and some are not available in specific circumstances (you\ncannot used require in views).\n\n<dl>\n<dt>emit</dt>\n<dd>\nPushes a key-value pair onto the map function's results array.\n</dd>\n<dt>sum</dt>\n<dd>\nAdds together the properties of an object and returns the result.\n</dd>\n<dt>log</dt>\n<dd>\nOuputs an object to the couchdb logs (useful when running couchdb directly\nin your terminal).\n</dd>\n<dt>toJSON</dt>\n<dd>\nCalls JSON.stringify.\n</dd>\n<dt>JSON</dt>\n<dd>\nThe JSON object provided by\n<a href=\"http://www.json.org/json2.js\">json2.js</a>\nwith two methods: JSON.stringify and JSON.parse.\n</dd>\n<dt>provides</dt>\n<dd>\nA global helper function for responding with the appropriate mime-type,\ndepending on the request's format parameter or accept headers.\nSee this section in\n<a href=\"http://wiki.apache.org/couchdb/Formatting_with_Show_and_List#Responding_to_different_Content-Type_Request_Headers\">\nFormatting with show and list</a>\non the CouchDB wiki for more information. Alternatively,\n<a href=\"http://github.com/apache/couchdb/blob/1.0.1/share/www/script/test/show_documents.js#L137-157\">\nsee the test</a>\nfor example usage.\n</dd>\n<dt>registerType</dt>\n<dd>\nRegisters a new type for use with the provides function. See this section\nin\n<a href=\"http://wiki.apache.org/couchdb/Formatting_with_Show_and_List#Responding_to_different_Content-Type_Request_Headers\">\nFormatting with show and list</a>\non the CouchDB wiki for more information.\n</dd>\n<dt>start</dt>\n<dd>\nSets the response headers to send from a list function. These are sent on\nthe first call to getRow. Therefore\n<strong>you cannot call start after getRow</strong>\n, even if you only send data after getting all rows.\n</dd>\n<dt>send</dt>\n<dd>\nSets a chunk of response data to be sent\n<strong>on the next call to getRow</strong>\n, or at <strong>the end of the list functions execution</strong>.\n</dd>\n<dt>getRow</dt>\n<dd>\nReturns the next row from the view or null if there are no more rows.\nOn the first call to get row, the headers set by start() are sent, on\nsubsequent calls the data chunks set by send() are sent.</dd>\n<dt>require</dt>\n<dd>\nReturns an evaluated CommonJS module.\n<strong>Not available in view functions</strong>.\nSee the section on CommonJS modules below for more information.\n</dd>\n</dl>\n\n## CommonJS Modules\n\nIt is possible to require a\n[CommonJS style module](http://wiki.commonjs.org/wiki/Modules/1.1)\nstored on a design document using the require function. The path to the function\nuses '/' instead of '.' to reference properties. For example, the following path\nwould reference a module stored on the design document at lib.mymodule:\n\n<pre><code class=\"javascript\">var mymodule = require('lib/mymodule');</code></pre>\n\nYou can use require inside CommonJS modules as well as validate,\nshow, list and update functions, but not in view functions (this is so that\nchanges in view functions can be detected, and the view rebuilt).\n\nRequire paths are relative to the current module, __but not relative if called\ninside a list, show, validate or update function__. In these cases the path\nto the module should be relative to the design document.\n\nYou can require modules from other design docs by using a relative path:\n\n<pre><code class=\"javascript\">require(\"../other_design_doc/module\");</code></pre>\n\n\n## Rewrites\n\nFirstly, rewrites cannot be absolute:\n\n<pre><code class=\"javascript\">{\"from\": \"/_session\", \"to\": \"/_session\"}  // incorrect!\n{\"from\": \"/_session\", \"to\": \"../../../_session\"}  // correct</code></pre>\n\nBy default, rewrites are also restricted to the database level (no more than\ntwo '..'), unless you set secure rewrites to false in your default.ini. Currently\n(v1.0.1) this means that if you want special handlers (e.g. sessions) available\nto couchapps using rewrites, you have to turn off this setting and proxy\nrequests as in the above example.\n\nYou can use parameters and 'splats' in rewrite urls and queries, but not\ninside query strings. For example, the following rewrites will work:\n\n<pre><code class=\"javascript\">{from: '/:name', to: '_show/test/:name'}   // OK!\n{from: '/test/:val', to: '_view/test', query: {key: ':val'}}   // OK!</code></pre>\n\nHowever, key's must be valid JSON strings, meaning you must use URLs in the\nform: /test/\"mykey\"  - which looks wrong. Unfortunately, you cannot fix this\nby embedding the :val part in quotes:\n\n<pre><code class=\"javascript\">{from: '/test/:val', to: '_view/test', query: {key: '\":val\"'}} // FAIL!</code></pre>\n\nIn this case, :val is not replaced with the matching part of the URL and the\nkey parameter will literally equal \":val\". In order to get around this, you\ncan use an array as the key for your view:\n\n<pre><code class=\"javascript\">{from: '/test/:val', to: '_view/test', query: {\n    startkey: [':val'], endkey: [':val', {}]\n}}</code></pre>\n\nIn this case, the :val part __will__ be replaced with the value from the\nURL. See: [http://www.mail-archive.com/dev@couchdb.apache.org/msg06923.html](http://www.mail-archive.com/dev@couchdb.apache.org/msg06923.html).\n\n\n## Closing comments\n\nA few of these points are documented on the\n[CouchDB wiki](http://wiki.apache.org/couchdb/) or on blog posts such as this, but\nfinding out what I don't know has been difficult in itself. I believe much of this\nstems from the reliance on global functions, which enter your code via a poorly\ndocumented sandbox.\n\nWhere normally you would require the functions from a module, or have them passed\nto your function, or used as the functions execution context ('this' in the case of\nJavaScript), in CouchDB they are __just there__.\n\nDespite my concerns regarding an increasingly steep learning curve, I'm really\nexcited about the capabilities of CouchDB, and couchapps in particular.\nUnfortunately, I don't think couchapps have seen as much interest and activity as\nI would have expected, and I intend to spend some time exploring the possibilities\nand evangelising about them soon!"
}
