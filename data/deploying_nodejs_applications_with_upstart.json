{
    "_id": "b2d7560775b54b86543c376b0f002a5b",
    "published": true,
    "type": "blogpost",
    "pubdate": "Tue, 25 May 2010 08:58:00 +0100",
    "title": "Deploying node.js with Upstart",
    "slug": "deploying_node_js_with_upstart",
    "intro": "Upstart seems like a really cool project to replace the old init.d scripts with\nan event-based system. However, I've found working with it to be pretty\nfrustrating. Events that I expected to fire don't, and its difficult to debug.\nAfter a bit of digging around and plenty of trial and error I've managed to\ncome up with a script that works on Lucid (and Karmic with a few tweaks). So,\nfor my own reference, and in the hope that I save some lucky Googler the time\nI spent investigating, here is my process for deploying a node.js application\nwith upstart:",
    "markdown": "Upstart seems like a really cool project to replace the old init.d scripts with\nan event-based system. However, I've found working with it to be pretty\nfrustrating. Events that I expected to fire don't, and its difficult to debug.\nAfter a bit of digging around and plenty of trial and error I've managed to\ncome up with a script that works on Lucid (and Karmic with a few tweaks). So,\nfor my own reference, and in the hope that I save some lucky Googler the time\nI spent investigating, here is my process for deploying a node.js application\nwith upstart:\n\nIf you don't have one already, I recommend creating a user to run your\napplications as. The following command will create a user called 'node':\n\n<pre><code class=\"no-highlight\">sudo adduser \\\n    --system \\\n    --shell /bin/bash \\\n    --gecos 'user for running node.js projects' \\\n    --group \\\n    --disabled-password \\\n    --home /home/node \\\n    node</code></pre>\n\nWe can then create an upstart script to start the node.js server. Upstart\nscripts go in /etc/init on Ubuntu. Create the file /etc/init/myserver.conf\n(replacing myserver with a more sensible name for your application), and add\nthe following:\n\n<pre><code class=\"no-highlight\">description \"my server\"\nauthor  \"caolan\"\n\nstart on (local-filesystems and net-device-up IFACE=eth0)\nstop on shutdown\n\nrespawn\n\nexec sudo -u node sh -c \"/usr/local/bin/node /var/local/sites/myserver/start.js >> /var/log/myserver.log 2>&1\"</code></pre>\n\nThe 'start on' line tells upstart to run the script when local filesystems are\navailable and the network is up (you may want to change eth0 to a different\ndevice if you're crazy enough to run a server over wireless). \n\nIf you're using Karmic, the above 'start on' line did not work in my tests.\nI was able to get the script running by using: 'start on runlevel [2345]'\ninstead.\n\nAlso, note that Ubuntu boots without waiting for /home to be mounted, so I\ndon't advise storing your application there, put it somewhere in /opt\nor /var instead. It should be possible to force Ubuntu to wait for /home to\nbecome available by adding the bootwait option to your /home partition in\n/etc/fstab. __However, I don't recommend this__ as it has been associated with\nbugs in Karmic which may [stop the computer from booting](https://bugs.launchpad.net/ubuntu/+source/util-linux/+bug/479965).\nAdding this has never worked for me in Lucid either, perhaps because of an\nencrypted /home partition. Thankfully /var/local/sites is a much more sensible\nto put your applications anyway ;)\n\nI've seen a number of examples showing this line as:\n\n<pre><code class=\"no-highlight\">start on startup</code></pre>\n\nIf you are not on Ubuntu, or are on a newer version than Lucid you might wish\nto try this. However, I have never managed to get this event to fire.\n\nThe respawn line tells upstart to run this script again should the process\nexit unexpectedly and the final line runs the application (in this example its\nstart.js). The application is run as the user 'node' and logs stdout and stderr\nto /var/log/myserver.log\n\nNext, I checkout/clone/copy my application to /var/local/sites/myserver:<pre><code class=\"no-highlight\">sudo mkdir -p /var/local/sites/myserver\nsudo chown node /var/local/sites/myserver\ncd /var/local/sites/myserver\nsudo -u node git clone /path/to/myserver_repository.git .</code></pre>\n\nThen, make sure the log files have the correct permissions:\n\n<pre><code class=\"no-highlight\">sudo touch /var/log/myserver.log\nsudo chown node /var/log/myserver.log</code></pre>\n\nWe're now ready to test the upstart script:\n\n<pre><code class=\"no-highlight\">$ sudo start myserver\nmyserver start/running, process 1234\n\n$ sudo status myserver\nmyserver start/running, process 1234</code></pre>\n\nThe second command ensures that the server didn't immediately die after\nstarting. If you're seeing output similar to the above, you can now try\nacessing your server to see if its running ok:\n\n<pre><code class=\"no-highlight\">$ curl localhost:8000</code></pre>\n\nIf that all looks sensible, lets try stopping the server:\n\n<pre><code class=\"no-highlight\">$ sudo stop myserver\nmyserver stop/waiting</code></pre>\n\nIf you've got this far then well done! Unfortunately, the most-likely-to-break\npart is yet to come... getting the script to run on startup! Try restarting\nand see if your application is running once the machine is back up.\nIf you have any problems, take a look at my advice above regarding the\n'start on' line and where to store your application files. Failing that, you\nshould be able to take a look at the logs for your application at\n/var/log/myserver.log.\n\nOnce you've got a template that works, deploying with upstart is a breeze.\nGood luck and happy hacking!\n\n__Note:__ I'm not a sysadmin, if you think you know better then you probably\ndo! Make some noise in the comments."
}
